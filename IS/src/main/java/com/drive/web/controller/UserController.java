/*
 * Created on 14 sep 2015 ( Time 20:17:55 )
 * Generated by MÃ¡ximo
 */
package com.drive.web.controller;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.drive.bean.Filter;
//--- Entities
import com.drive.bean.User;
import com.drive.bean.jpa.UserEntity;
//--- Services 
import com.drive.business.service.UserService;
import com.drive.business.service.impl.UserServiceImpl;
import com.drive.business.service.mapping.UserServiceMapper;
import com.drive.data.repository.jpa.HibernateService;
//--- Common classes
import com.drive.web.common.AbstractController;
import com.drive.web.common.FormMode;
import com.drive.web.common.Message;
import com.drive.web.common.MessageType;
import com.drive.web.listitem.FiltersListItem;


/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("/user")
public class UserController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "user";
	private static final String MAIN_LIST_NAME = "list";
	private static final String MAIN_LIST_FILTERQUESTION = "filterUser";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM = "user/form";
	private static final String JSP_LIST = "user/list";

	// --- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE = "/user/create";
	private static final String SAVE_ACTION_UPDATE = "/user/update";

	// --- Main entity service
	@Resource
	private UserService userService; // Injected by Spring
	
	@Resource
	private HibernateService hibernateService;
	@Resource
	private UserServiceMapper userServiceMapper;

	
	
	private Properties properties;

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public UserController() {
		super(UserController.class, MAIN_ENTITY_NAME);
		try {
			properties = new Properties();
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			InputStream stream = loader.getResourceAsStream("/config.properties");
			properties.load(stream);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		log("UserController created.");
	}

	// --------------------------------------------------------------------------------------
	// Spring MVC model management
	// --------------------------------------------------------------------------------------
	

	/**
	 * Populates the Spring MVC model with the given entity and eventually other
	 * useful data
	 * 
	 * @param model
	 * @param user
	 */
	private void populateModel(Model model, User user, FormMode formMode) {
		// --- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, user);
		if (formMode == FormMode.CREATE) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create"
													// mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE);
			
		} else if (formMode == FormMode.UPDATE) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update"
													// mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE);
			
		}
	}

	// --------------------------------------------------------------------------------------
	// Request mapping
	// --------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of User found in the database
	 * 
	 * @param model
	 *            Spring MVC model
	 * @return
	 */

	@RequestMapping()
	public String list(Model model, HttpServletRequest request, HttpServletResponse response) {
		log("Action 'list'");
				
		List<FiltersListItem> items = new LinkedList<FiltersListItem>();
		for (String value : addFilterQuestion()) {
			items.add(new FiltersListItem(value, properties.getProperty("text." + value)));
		}
		model.addAttribute(MAIN_LIST_FILTERQUESTION, items);
		
		List<User> list = userService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		
		return JSP_LIST;
	}

	

	/**
	 * Shows a form page in order to create a new User
	 * 
	 * @param model
	 *            Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		// --- Populates the model with a new instance
		User user = new User();
		populateModel(model, user, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing User
	 * 
	 * @param model
	 *            Spring MVC model
	 * @param id
	 *            primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{id}")
	public String formForUpdate(Model model, @PathVariable("id") Integer id) {
		log("Action 'formForUpdate'");
		// --- Search the entity by its primary key and stores it in the model
		User user = userService.findById(id);
		populateModel(model, user, FormMode.UPDATE);
		return JSP_FORM;
	}

	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/filter", method=RequestMethod.POST, produces=MediaType.APPLICATION_JSON_VALUE,
			consumes=MediaType.APPLICATION_JSON_VALUE) 
	@ResponseBody
	public List<User> filter(@RequestBody Filter filter) {
		log("Action 'filter'");
		List<User> list = new ArrayList<User>();
		try {
			String field = properties.getProperty("user."+filter.getField());
			String join = properties.getProperty("user.name"+filter.getField());
			String type = properties.getProperty("user.type."+filter.getField());
			
			
			
			List<User> listQE = null;
			
			if(type!=null && type.equals("Integer")){
				listQE =(List<User>) userService.queryFilter(UserEntity.class, field,join, Integer.parseInt(filter.getValue()));
			} else if( type==null){
				listQE =(List<User>) userService.queryFilter(UserEntity.class, field,join, filter.getValue());	
			}
			
			
			return listQE;
		} catch (Exception e) {
			log("Action 'create' : Exception - " + e.getMessage());
			//messageHelper.addException(model, "tests.error.create", e);
			return list;
		}
	}
	
	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends
	 * by 'http redirect'<br>
	 * 
	 * @param user
	 *            entity to be created
	 * @param bindingResult
	 *            Spring MVC binding result
	 * @param model
	 *            Spring MVC model
	 * @param redirectAttributes
	 *            Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create") // GET or POST
	public String create(@Valid User user, BindingResult bindingResult, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
	
		

		try {
			if (!bindingResult.hasErrors()) {
				
				
				
				User userCreated = userService.create(user);
				model.addAttribute(MAIN_ENTITY_NAME, userCreated);

				// ---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, "save.ok"));
				return redirectToList();
			} else {
				populateModel(model, user, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch (Exception e) {
			log("Action 'create' : Exception - " + e.getMessage());
			messageHelper.addException(model, "user.error.create", e);
			populateModel(model, user, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends
	 * by 'http redirect'<br>
	 * 
	 * @param user
	 *            entity to be updated
	 * @param bindingResult
	 *            Spring MVC binding result
	 * @param model
	 *            Spring MVC model
	 * @param redirectAttributes
	 *            Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update") // GET or POST
	public String update(@Valid User user, BindingResult bindingResult, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
	
		try {
			if (!bindingResult.hasErrors()) {
				
				// --- Perform database operations
				User userSaved = userService.update(user);
				model.addAttribute(MAIN_ENTITY_NAME, userSaved);
				// --- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, "save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToList();
			} else {
				log("Action 'update' : binding errors");
				populateModel(model, user, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch (Exception e) {
			messageHelper.addException(model, "user.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage());
			populateModel(model, user, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends
	 * by 'http redirect'<br>
	 * 
	 * @param redirectAttributes
	 * @param id
	 *            primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id) {
		log("Action 'delete'");
		try {
			
			userService.delete(id);
			
			// --- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS, "delete.ok"));
		} catch (Exception e) {
			messageHelper.addException(redirectAttributes, "user.error.delete", e);
		}
		return redirectToList();
	}

	
	private List<String> addFilterQuestion() {

		List<String> filters = new ArrayList<String>();
		try {
			Properties properties = new Properties();
			ClassLoader loader = Thread.currentThread().getContextClassLoader();
			InputStream stream = loader.getResourceAsStream("/config.properties");
			properties.load(stream);

			String prop = properties.getProperty("user.Fields");
			if (prop != null && !prop.equals("")) {
				String[] values = prop.split(",");
				for (String string : values) {
					filters.add(string);
				}
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return filters;
	}
}
